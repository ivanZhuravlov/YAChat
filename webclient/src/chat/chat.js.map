{"version":3,"sources":["chat.ts"],"names":[],"mappings":"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","file":"chat.js","sourceRoot":"","sourcesContent":["import { Observable } from 'rxjs/Observable';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\n\r\ndeclare let window: any;\r\n\r\nexport class Chat {\r\n\r\n    chatSocket: any;\r\n    \r\n    chatSocketConnectionState = new BehaviorSubject<string>('disconnected');\r\n\r\n    receiveMessageStream: Observable<any>;\r\n    receiveMessageSubscription: Subscription;\r\n    messages: any[] = [];\r\n    currentUserId: string = 'Client without UserID';\r\n\r\n    constructor(chatSocket: any) {\r\n        this.chatSocket = chatSocket;\r\n        this.activate();\r\n    }\r\n\r\n    public activate(): void {\r\n        // this.chatSocket.on('connect', () => this.socketConnected$.next(true));\r\n        // this.chatSocket.on('disconnect', () => this.socketConnected$.next(false));\r\n\r\n        let that = this;\r\n        this.chatSocket.on('connect', () => {\r\n            that.messages.push({ msg: 'You are connected to the chat!', userid: 'Server' });\r\n            that.chatSocketConnectionState.next('connected');\r\n        });\r\n\r\n        this.chatSocket.on('disconnect', () => {\r\n            that.messages.push({ msg: 'Server disconnected. Trying to reconnect...', userid: 'Server' });\r\n            that.chatSocketConnectionState.next('disconnected');\r\n        });\r\n\r\n        this.chatSocket.on('reconnect', () => {\r\n            that.messages.push({ msg: 'You are reconnected to the chat', userid: 'Server' });\r\n            that.chatSocketConnectionState.next('reconnected');\r\n        });\r\n\r\n        this.chatSocket.on('client:getuserid', (data: any) => {\r\n            that.currentUserId = data.socketid;\r\n            that.messages.push({ msg: `You've got the client id ${that.currentUserId}!`, userid: 'Server' });\r\n        });\r\n\r\n        this.receiveMessageStream = this.listen('server:receivemsg');\r\n\r\n        this.receiveMessageSubscription = this.receiveMessageStream.subscribe(\r\n            (data) => this.messages.push({ \r\n                    msg: data.msg, \r\n                    userid: data.userid \r\n                }));\r\n    }\r\n\r\n    getCurrentUserId() {\r\n        return this.currentUserId;\r\n    }\r\n\r\n    send(msg: string) {\r\n        if (msg.length) {\r\n            this.chatSocket.emit('client:sendmsg', msg);\r\n            this.messages.push({ msg: msg, userid: this.currentUserId });\r\n        }\r\n    }\r\n\r\n    listen(event: string): Observable<any> {\r\n        return new Observable(observer => {\r\n            this.chatSocket.on(event, (data: any) => {\r\n                observer.next(data);\r\n            });\r\n\r\n            // observable is disposed\r\n            return () => {\r\n                this.chatSocket.off(event);\r\n            }\r\n        });\r\n    }\r\n}"]}