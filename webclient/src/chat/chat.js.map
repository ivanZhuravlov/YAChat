{"version":3,"sources":["chat.ts"],"names":[],"mappings":"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","file":"chat.js","sourceRoot":"","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\n\ndeclare let window: any;\n\nexport class Chat {\n\n    chatSocket: any;\n    \n    chatSocketConnectionState = new BehaviorSubject<string>('disconnected');\n\n    receiveMessageStream: Observable<any>;\n    receiveAllMessagesStream: Observable<any>;\n    receiveMessageSubscription: Subscription;\n    receiveAllMessagesSubscription: Subscription;\n    messages: any[] = [];\n    currentUserId: string = 'Client without UserID';\n    currentUserName: string = '';\n\n    constructor(chatSocket: any, username: string) {\n        this.chatSocket = chatSocket;\n        this.currentUserName = username;\n        this.activate();\n    }\n\n    public activate(): void {\n        // this.chatSocket.on('connect', () => this.socketConnected$.next(true));\n        // this.chatSocket.on('disconnect', () => this.socketConnected$.next(false));\n\n        let that = this;\n        this.chatSocket.on('connect', () => {\n            that.messages.push({ msg: 'You are connected to the chat!', userid: 'Server', username: 'Server' });\n            that.chatSocketConnectionState.next('connected');\n            this.chatSocket.emit('client:register', this.currentUserName);\n        });\n\n        this.chatSocket.on('disconnect', () => {\n            that.messages.push({ msg: 'Server disconnected. Trying to reconnect...', userid: 'Server', username: 'Server' });\n            that.chatSocketConnectionState.next('disconnected');\n        });\n\n        this.chatSocket.on('reconnect', () => {\n            that.messages.push({ msg: 'You are reconnected to the chat', userid: 'Server', username: 'Server' });\n            that.chatSocketConnectionState.next('reconnected');\n        });\n\n        this.chatSocket.on('client:getuserid', (data: any) => {\n            that.currentUserId = data.socketid;\n            that.messages.push({ msg: `You've got the client id ${that.currentUserId}!`, userid: 'Server', username: 'Server' });\n        });\n\n        this.chatSocket.on('server:registered', () => {\n            that.messages.push({ msg: `You are now registed as ${that.currentUserName}!`, userid: 'Server', username: 'Server' });\n            this.chatSocket.emit('client:getallmsg');\n        });\n\n        this.receiveMessageStream = this.listen('server:receivemsg');\n\n        this.receiveAllMessagesStream = this.listen('server:gotallmsg');\n\n        this.receiveMessageSubscription = this.receiveMessageStream.subscribe(\n            (data) => this.messages.push({ \n                    msg: data.msg, \n                    userid: data.userid,\n                    username: data.username\n                }));\n\n        this.receiveAllMessagesSubscription = this.receiveAllMessagesStream.subscribe(\n            (sendMessages) => \n            {\n                console.log(\"Received chat protocol.\") \n                console.log(sendMessages);\n                for (let message of sendMessages)\n                {\n                    this.messages.push(message);\n                }\n            });\n    }\n\n    getCurrentUserId() {\n        return this.currentUserId;\n    }\n\n    send(msg: string) {\n        if (msg.length) {\n            this.chatSocket.emit('client:sendmsg', msg);\n            this.messages.push({ msg: msg, userid: this.currentUserId, username: this.currentUserName });\n        }\n    }\n\n    listen(event: string): Observable<any> {\n        return new Observable(observer => {\n            this.chatSocket.on(event, (data: any) => {\n                observer.next(data);\n            });\n\n            // observable is disposed\n            return () => {\n                this.chatSocket.off(event);\n            }\n        });\n    }\n}\n"]}